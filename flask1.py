from flask import Flask
import pickle
import numpy as np
from sklearn.tree import DecisionTreeRegressor
app = Flask(__name__)

area_codes = {'Ajeroport': 0,
 'Akademicheskoe': 1,
 'Alekseevskoe': 2,
 "Altuf'evskoe": 3,
 'Arbat': 4,
 'Babushkinskoe': 5,
 'Basmannoe': 6,
 'Begovoe': 7,
 'Beskudnikovskoe': 8,
 'Bibirevo': 9,
 'Birjulevo Vostochnoe': 10,
 'Birjulevo Zapadnoe': 11,
 'Bogorodskoe': 12,
 'Brateevo': 13,
 'Butyrskoe': 14,
 'Caricyno': 15,
 'Cheremushki': 16,
 "Chertanovo Central'noe": 17,
 'Chertanovo Juzhnoe': 18,
 'Chertanovo Severnoe': 19,
 'Danilovskoe': 20,
 'Dmitrovskoe': 21,
 'Donskoe': 22,
 'Dorogomilovo': 23,
 'Filevskij Park': 24,
 'Fili Davydkovo': 25,
 'Gagarinskoe': 26,
 "Gol'janovo": 27,
 'Golovinskoe': 28,
 'Hamovniki': 29,
 'Horoshevo-Mnevniki': 30,
 'Horoshevskoe': 31,
 'Hovrino': 32,
 'Ivanovskoe': 33,
 'Izmajlovo': 34,
 'Jakimanka': 35,
 'Jaroslavskoe': 36,
 'Jasenevo': 37,
 'Juzhnoe Butovo': 38,
 'Juzhnoe Medvedkovo': 39,
 'Juzhnoe Tushino': 40,
 'Juzhnoportovoe': 41,
 'Kapotnja': 42,
 "Kon'kovo": 43,
 'Koptevo': 44,
 'Kosino-Uhtomskoe': 45,
 'Kotlovka': 46,
 "Krasnosel'skoe": 47,
 'Krjukovo': 48,
 'Krylatskoe': 49,
 'Kuncevo': 50,
 'Kurkino': 51,
 "Kuz'minki": 52,
 'Lefortovo': 53,
 'Levoberezhnoe': 54,
 'Lianozovo': 55,
 'Ljublino': 56,
 'Lomonosovskoe': 57,
 'Losinoostrovskoe': 58,
 "Mar'ina Roshha": 59,
 "Mar'ino": 60,
 'Marfino': 61,
 'Matushkino': 62,
 'Meshhanskoe': 63,
 'Metrogorodok': 64,
 'Mitino': 65,
 'Molzhaninovskoe': 66,
 "Moskvorech'e-Saburovo": 67,
 'Mozhajskoe': 68,
 'Nagatino-Sadovniki': 69,
 'Nagatinskij Zaton': 70,
 'Nagornoe': 71,
 'Nekrasovka': 72,
 'Nizhegorodskoe': 73,
 'Novo-Peredelkino': 74,
 'Novogireevo': 75,
 'Novokosino': 76,
 'Obruchevskoe': 77,
 'Ochakovo-Matveevskoe': 78,
 'Orehovo-Borisovo Juzhnoe': 79,
 'Orehovo-Borisovo Severnoe': 80,
 'Ostankinskoe': 81,
 'Otradnoe': 82,
 'Pechatniki': 83,
 'Perovo': 84,
 'Pokrovskoe Streshnevo': 85,
 'Poselenie Desjonovskoe': 86,
 'Poselenie Filimonkovskoe': 87,
 'Poselenie Kievskij': 88,
 'Poselenie Klenovskoe': 89,
 'Poselenie Kokoshkino': 90,
 'Poselenie Krasnopahorskoe': 91,
 'Poselenie Marushkinskoe': 92,
 'Poselenie Mihajlovo-Jarcevskoe': 93,
 'Poselenie Moskovskij': 94,
 'Poselenie Mosrentgen': 95,
 'Poselenie Novofedorovskoe': 96,
 'Poselenie Pervomajskoe': 97,
 'Poselenie Rjazanovskoe': 98,
 'Poselenie Rogovskoe': 99,
 'Poselenie Shhapovskoe': 100,
 'Poselenie Shherbinka': 101,
 'Poselenie Sosenskoe': 102,
 'Poselenie Vnukovskoe': 103,
 'Poselenie Voronovskoe': 104,
 'Poselenie Voskresenskoe': 105,
 'Preobrazhenskoe': 106,
 'Presnenskoe': 107,
 'Prospekt Vernadskogo': 108,
 'Ramenki': 109,
 'Rjazanskij': 110,
 'Rostokino': 111,
 'Savelki': 112,
 'Savelovskoe': 113,
 'Severnoe': 114,
 'Severnoe Butovo': 115,
 'Severnoe Izmajlovo': 116,
 'Severnoe Medvedkovo': 117,
 'Severnoe Tushino': 118,
 'Shhukino': 119,
 'Silino': 120,
 'Sokol': 121,
 "Sokol'niki": 122,
 'Sokolinaja Gora': 123,
 'Solncevo': 124,
 'Staroe Krjukovo': 125,
 'Strogino': 126,
 'Sviblovo': 127,
 'Taganskoe': 128,
 "Tekstil'shhiki": 129,
 'Teplyj Stan': 130,
 'Timirjazevskoe': 131,
 'Troickij okrug': 132,
 'Troparevo-Nikulino': 133,
 'Tverskoe': 134,
 'Veshnjaki': 135,
 'Vnukovo': 136,
 'Vojkovskoe': 137,
 'Vostochnoe': 138,
 'Vostochnoe Degunino': 139,
 'Vostochnoe Izmajlovo': 140,
 'Vyhino-Zhulebino': 141,
 "Zamoskvorech'e": 142,
 'Zapadnoe Degunino': 143,
 'Zjablikovo': 144,
 'Zjuzino': 145}
product_type_dict = {'Investment': 0, 'OwnerOccupier':1}
@app.route("/")
def load_example():
    return "example:/prediction/full_sq=35/sub_area=Bibirevo/floor=5/product_type=Investment"

model = pickle.load(open("model_new.pickle", 'rb'))

@app.route("/prediction/full_sq=<int:full_sq>/sub_area=<string:sub_area>/floor=<int:floor>/product_type=<string:product_type>")
def show_post(full_sq, sub_area, floor, product_type):
    sample = np.array([full_sq, area_codes[sub_area], floor, product_type_dict[product_type]]).reshape(1, -1)
    prediction = model.predict(sample)
    return "House price is {:.2f}".format(prediction[0])


import os

if __name__ == "__main__":
    port = int(os.environ["PORT"])
    app.run(port=port, host='0.0.0.0')
